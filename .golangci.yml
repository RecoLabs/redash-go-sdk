linters-settings:
  dupl:
    threshold: 100
  funlen:
    lines: 100
    statements: 50
  gci:
    local-prefixes: github.com/golangci/golangci-lint
  goconst:
    min-len: 2
    min-occurrences: 2
  gocritic:
    enabled-tags:
    - diagnostic
    - experimental
    - opinionated
    - performance
    - style
  gocyclo:
    min-complexity: 15
  goimports:
    local-prefixes: github.com/golangci/golangci-lint
  gomnd:
    settings:
      mnd:
        # don't include the "operation" and "assign"
        checks:
        - argument
        - case
        - condition
        - return
  govet:
    check-shadowing: true
    settings:
      printf:
        funcs:
        - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
        - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
        - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
        - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
  lll:
    line-length: 140
  maligned:
    suggest-new: true
  misspell:
    locale: US
  nolintlint:
    allow-leading-space: true # don't require machine-readable nolint directives (i.e. with no leading space)
    allow-unused: false # report any unused nolint directives
    require-explanation: false # don't require an explanation for nolint directives
    require-specific: false # don't require nolint directives to be specific about which linter is being skipped
  revive:
    ignoreGeneratedHeader: false
    severity: warning
    confidence: 0.8
    errorCode: 0
    warningCode: 0

linters:
  # please, do not use `enable-all`: it's deprecated and will be removed soon.
  # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint
  disable-all: true
  enable:
  - bodyclose
  - deadcode
  - depguard
  - dogsled
  - dupl
  - errcheck
  - exportloopref
  - exhaustive
  - funlen
  - gochecknoinits
  - goconst
  - gocritic
  - gocyclo
  - gofmt
  - goimports
  - gomnd
  - goprintffuncname
  - gosec
  - gosimple
  - govet
  - ineffassign
  - lll
  - misspell
  - nakedret
  - noctx
  - nolintlint
  - revive
  - rowserrcheck
  - staticcheck
  - structcheck
  - stylecheck
  - typecheck
  - unconvert
  - unparam
  - unused
  - varcheck
  - whitespace

  # don't enable:
  # - asciicheck
  # - scopelint
  # - gochecknoglobals
  # - gocognit
  # - godot
  # - godox
  # - goerr113
  # - interfacer
  # - maligned
  # - nestif
  # - prealloc
  # - testpackage
  # - revive
  # - wsl

issues:
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
  - path: _test\.go
    linters:
    - gomnd
  exclude-use-default: false
  exclude:
    # Uncomment checks you want to INCLUDE, comment checks you want to IGNORE
    # EXC0001 errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
    # - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print(f|ln)?|os\.(Un)?Setenv). is not checked

    # EXC0002 golint: Annoying issue about not having a comment. The rare codebase has such comments
    # - (comment on exported (method|function|type|const)|should have( a package)? comment|comment should be of the form)

    # EXC0003 golint: False positive when tests are defined in package 'test'
  - func name will be used as test\.Test.* by other packages, and that stutters; consider calling this

    # EXC0004 govet: Common false positives
  - (possible misuse of unsafe.Pointer|should have signature)

    # EXC0005 staticcheck: Developers tend to write in C-style with an explicit 'break' in a 'switch', so it's ok to ignore
    # - ineffective break statement. Did you mean to break out of the outer loop

    # EXC0006 gosec: Too many false-positives on 'unsafe' usage
    # - Use of unsafe calls should be audited
  - (G107)
    # EXC0007 gosec: Too many false-positives for parametrized shell calls
    # - Subprocess launch(ed with variable|ing should be audited)

    # EXC0008 gosec: Duplicated errcheck checks
  - (G104|G307)

    # EXC0009 gosec: Too many issues in popular repos
    # - (Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)

    # EXC0010 gosec: False positive is triggered by 'src, err := ioutil.ReadFile(filename)'
    # - Potential file inclusion via variable

    # EXC0011 stylecheck: Annoying issue about not having a comment. The rare codebase has such comments
  - (comment on exported (method|function|type|const)|should have( a package)? comment|comment should be of the form)

    # EXC0012 errcheck: ignore errors on log
  - Error return value of (.*Log.*|.*\`\`.*) is not checked

run:
  skip-dirs-use-default: true
