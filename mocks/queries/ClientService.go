// Code generated by mockery v2.9.4. DO NOT EDIT.

package queriesmock

import (
	runtime "github.com/go-openapi/runtime"
	queries "github.com/recolabs/redash-go-sdk/gen/client/queries"
	mock "github.com/stretchr/testify/mock"
)

// ClientService is an autogenerated mock type for the ClientService type
type ClientService struct {
	mock.Mock
}

// DeleteQueriesID provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) DeleteQueriesID(params *queries.DeleteQueriesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...queries.ClientOption) (*queries.DeleteQueriesIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *queries.DeleteQueriesIDOK
	if rf, ok := ret.Get(0).(func(*queries.DeleteQueriesIDParams, runtime.ClientAuthInfoWriter, ...queries.ClientOption) *queries.DeleteQueriesIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queries.DeleteQueriesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*queries.DeleteQueriesIDParams, runtime.ClientAuthInfoWriter, ...queries.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueries provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) GetQueries(params *queries.GetQueriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...queries.ClientOption) (*queries.GetQueriesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *queries.GetQueriesOK
	if rf, ok := ret.Get(0).(func(*queries.GetQueriesParams, runtime.ClientAuthInfoWriter, ...queries.ClientOption) *queries.GetQueriesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queries.GetQueriesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*queries.GetQueriesParams, runtime.ClientAuthInfoWriter, ...queries.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueriesID provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) GetQueriesID(params *queries.GetQueriesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...queries.ClientOption) (*queries.GetQueriesIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *queries.GetQueriesIDOK
	if rf, ok := ret.Get(0).(func(*queries.GetQueriesIDParams, runtime.ClientAuthInfoWriter, ...queries.ClientOption) *queries.GetQueriesIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queries.GetQueriesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*queries.GetQueriesIDParams, runtime.ClientAuthInfoWriter, ...queries.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueriesIDResults provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) GetQueriesIDResults(params *queries.GetQueriesIDResultsParams, authInfo runtime.ClientAuthInfoWriter, opts ...queries.ClientOption) (*queries.GetQueriesIDResultsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *queries.GetQueriesIDResultsOK
	if rf, ok := ret.Get(0).(func(*queries.GetQueriesIDResultsParams, runtime.ClientAuthInfoWriter, ...queries.ClientOption) *queries.GetQueriesIDResultsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queries.GetQueriesIDResultsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*queries.GetQueriesIDResultsParams, runtime.ClientAuthInfoWriter, ...queries.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostQueries provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PostQueries(params *queries.PostQueriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...queries.ClientOption) (*queries.PostQueriesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *queries.PostQueriesOK
	if rf, ok := ret.Get(0).(func(*queries.PostQueriesParams, runtime.ClientAuthInfoWriter, ...queries.ClientOption) *queries.PostQueriesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queries.PostQueriesOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*queries.PostQueriesParams, runtime.ClientAuthInfoWriter, ...queries.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostQueriesID provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PostQueriesID(params *queries.PostQueriesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...queries.ClientOption) (*queries.PostQueriesIDOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *queries.PostQueriesIDOK
	if rf, ok := ret.Get(0).(func(*queries.PostQueriesIDParams, runtime.ClientAuthInfoWriter, ...queries.ClientOption) *queries.PostQueriesIDOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queries.PostQueriesIDOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*queries.PostQueriesIDParams, runtime.ClientAuthInfoWriter, ...queries.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostQueriesIDRegenerateAPIKey provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PostQueriesIDRegenerateAPIKey(params *queries.PostQueriesIDRegenerateAPIKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...queries.ClientOption) (*queries.PostQueriesIDRegenerateAPIKeyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *queries.PostQueriesIDRegenerateAPIKeyOK
	if rf, ok := ret.Get(0).(func(*queries.PostQueriesIDRegenerateAPIKeyParams, runtime.ClientAuthInfoWriter, ...queries.ClientOption) *queries.PostQueriesIDRegenerateAPIKeyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queries.PostQueriesIDRegenerateAPIKeyOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*queries.PostQueriesIDRegenerateAPIKeyParams, runtime.ClientAuthInfoWriter, ...queries.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostQueriesIDResults provides a mock function with given fields: params, authInfo, opts
func (_m *ClientService) PostQueriesIDResults(params *queries.PostQueriesIDResultsParams, authInfo runtime.ClientAuthInfoWriter, opts ...queries.ClientOption) (*queries.PostQueriesIDResultsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *queries.PostQueriesIDResultsOK
	if rf, ok := ret.Get(0).(func(*queries.PostQueriesIDResultsParams, runtime.ClientAuthInfoWriter, ...queries.ClientOption) *queries.PostQueriesIDResultsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queries.PostQueriesIDResultsOK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*queries.PostQueriesIDResultsParams, runtime.ClientAuthInfoWriter, ...queries.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTransport provides a mock function with given fields: transport
func (_m *ClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}
