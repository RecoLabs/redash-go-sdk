// Code generated by go-swagger; DO NOT EDIT.

package queries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/recolabs/redash-go-sdk/gen/models"
)

// PostQueriesReader is a Reader for the PostQueries structure.
type PostQueriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostQueriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostQueriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPostQueriesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostQueriesOK creates a PostQueriesOK with default headers values
func NewPostQueriesOK() *PostQueriesOK {
	return &PostQueriesOK{}
}

/* PostQueriesOK describes a response with status code 200, with default header values.

OK
*/
type PostQueriesOK struct {
	Payload *models.Query
}

func (o *PostQueriesOK) Error() string {
	return fmt.Sprintf("[POST /queries][%d] postQueriesOK  %+v", 200, o.Payload)
}
func (o *PostQueriesOK) GetPayload() *models.Query {
	return o.Payload
}

func (o *PostQueriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Query)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostQueriesDefault creates a PostQueriesDefault with default headers values
func NewPostQueriesDefault(code int) *PostQueriesDefault {
	return &PostQueriesDefault{
		_statusCode: code,
	}
}

/* PostQueriesDefault describes a response with status code -1, with default header values.

error
*/
type PostQueriesDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the post queries default response
func (o *PostQueriesDefault) Code() int {
	return o._statusCode
}

func (o *PostQueriesDefault) Error() string {
	return fmt.Sprintf("[POST /queries][%d] PostQueries default  %+v", o._statusCode, o.Payload)
}
func (o *PostQueriesDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *PostQueriesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostQueriesBody post queries body
swagger:model PostQueriesBody
*/
type PostQueriesBody struct {

	// data source id
	DataSourceID int64 `json:"data_source_id,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// is draft
	// Required: true
	IsDraft *bool `json:"is_draft"`

	// name
	Name string `json:"name,omitempty"`

	// options
	Options interface{} `json:"options,omitempty"`

	// query
	Query string `json:"query,omitempty"`

	// schedule
	Schedule *models.Schedule `json:"schedule,omitempty"`

	// version
	Version int64 `json:"version,omitempty"`
}

// Validate validates this post queries body
func (o *PostQueriesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIsDraft(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostQueriesBody) validateIsDraft(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"is_draft", "body", o.IsDraft); err != nil {
		return err
	}

	return nil
}

func (o *PostQueriesBody) validateSchedule(formats strfmt.Registry) error {
	if swag.IsZero(o.Schedule) { // not required
		return nil
	}

	if o.Schedule != nil {
		if err := o.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "schedule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post queries body based on the context it is used
func (o *PostQueriesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostQueriesBody) contextValidateSchedule(ctx context.Context, formats strfmt.Registry) error {

	if o.Schedule != nil {
		if err := o.Schedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "schedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "schedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostQueriesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostQueriesBody) UnmarshalBinary(b []byte) error {
	var res PostQueriesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
