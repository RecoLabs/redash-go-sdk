// Code generated by go-swagger; DO NOT EDIT.

package queries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new queries API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for queries API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteQueriesID(params *DeleteQueriesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteQueriesIDOK, error)

	GetQueries(params *GetQueriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQueriesOK, error)

	GetQueriesID(params *GetQueriesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQueriesIDOK, error)

	GetQueriesIDResults(params *GetQueriesIDResultsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQueriesIDResultsOK, error)

	PostQueries(params *PostQueriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostQueriesOK, error)

	PostQueriesID(params *PostQueriesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostQueriesIDOK, error)

	PostQueriesIDRegenerateAPIKey(params *PostQueriesIDRegenerateAPIKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostQueriesIDRegenerateAPIKeyOK, error)

	PostQueriesIDResults(params *PostQueriesIDResultsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostQueriesIDResultsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteQueriesID delete queries ID API
*/
func (a *Client) DeleteQueriesID(params *DeleteQueriesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteQueriesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteQueriesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteQueriesID",
		Method:             "DELETE",
		PathPattern:        "/queries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteQueriesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteQueriesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteQueriesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetQueries get queries API
*/
func (a *Client) GetQueries(params *GetQueriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQueriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQueriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetQueries",
		Method:             "GET",
		PathPattern:        "/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetQueriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetQueriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetQueriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetQueriesID get queries ID API
*/
func (a *Client) GetQueriesID(params *GetQueriesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQueriesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQueriesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetQueriesID",
		Method:             "GET",
		PathPattern:        "/queries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetQueriesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetQueriesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetQueriesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetQueriesIDResults get queries ID results API
*/
func (a *Client) GetQueriesIDResults(params *GetQueriesIDResultsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQueriesIDResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQueriesIDResultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetQueriesIDResults",
		Method:             "GET",
		PathPattern:        "/queries/{id}/results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetQueriesIDResultsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetQueriesIDResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetQueriesIDResultsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostQueries post queries API
*/
func (a *Client) PostQueries(params *PostQueriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostQueriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostQueriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostQueries",
		Method:             "POST",
		PathPattern:        "/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostQueriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostQueriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostQueriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostQueriesID post queries ID API
*/
func (a *Client) PostQueriesID(params *PostQueriesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostQueriesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostQueriesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostQueriesID",
		Method:             "POST",
		PathPattern:        "/queries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostQueriesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostQueriesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostQueriesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostQueriesIDRegenerateAPIKey post queries ID regenerate API key API
*/
func (a *Client) PostQueriesIDRegenerateAPIKey(params *PostQueriesIDRegenerateAPIKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostQueriesIDRegenerateAPIKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostQueriesIDRegenerateAPIKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostQueriesIDRegenerateAPIKey",
		Method:             "POST",
		PathPattern:        "/queries/{id}/regenerate_api_key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostQueriesIDRegenerateAPIKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostQueriesIDRegenerateAPIKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostQueriesIDRegenerateAPIKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostQueriesIDResults post queries ID results API
*/
func (a *Client) PostQueriesIDResults(params *PostQueriesIDResultsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostQueriesIDResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostQueriesIDResultsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostQueriesIDResults",
		Method:             "POST",
		PathPattern:        "/queries/{id}/results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostQueriesIDResultsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostQueriesIDResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostQueriesIDResultsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
